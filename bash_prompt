#!/usr/bin/env bash
# bash prompt goodness lives here

# Automatically trim long paths in the prompt (requires Bash 4.x)
# PROMPT_DIRTRIM=2

function prompt_command () {
  # This has to be first; exit code of previous command
  local -r EXIT="$?"
  # Escape sequences for formatting
  local -r RESET="\[$(tput sgr0)\]"
  # Solarized colorscheme
  local -r FG_BLACK="\[$(tput setaf 0)\]"
  local -r FG_RED="\[$(tput setaf 1)\]"
  local -r FG_GREEN="\[$(tput setaf 2)\]"
  local -r FG_YELLOW="\[$(tput setaf 3)\]"
  local -r FG_BLUE="\[$(tput setaf 4)\]" # looks too much like cyan
  local -r FG_MAGENTA="\[$(tput setaf 5)\]"
  local -r FG_CYAN="\[$(tput setaf 6)\]"

  # Put all the git stuff onto PS1
  function __git_info() {
    # check if git is installed
    [ -x "$(which git)" ] || return
    # check if we're in a git repo. (fast)
    git rev-parse --is-inside-work-tree &>/dev/null || return
    # git symbols
    local -r GIT_BRANCH_CHANGED_SYMBOL='+'
    local -r GIT_NEED_PUSH_SYMBOL='▲'
    local -r GIT_NEED_PULL_SYMBOL='▼'
    # check for what branch we're on. (fast)
    #   if… HEAD isn’t a symbolic ref (typical branch),
    #   then… get a tracking remote branch or tag
    #   otherwise… get the short SHA for the latest commit
    #   lastly just give up.
    local -r branch="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
      git describe --all --exact-match HEAD 2> /dev/null || \
      git rev-parse --short HEAD 2> /dev/null || \
      '(unknown)')";
    # git status to parse for numChanges, aheadN and behindN
    local stat="$(git status --porcelain --branch)"
    # how many uncommited changes (staged and unstaged)
    # parse into numChanges, and how far ahead/behind remote
    local numChanges=$(($(echo "${stat}" | wc -l) - 1))
    local branchStat="$(echo "${stat}" | grep '^##' | grep -o '\[.\+\]$')"
    local aheadN="$(echo $branchStat | grep -o 'ahead [[:digit:]]\+' | grep -o '[[:digit:]]\+')"
    local behindN="$(echo $branchStat | grep -o 'behind [[:digit:]]\+' | grep -o '[[:digit:]]\+')"
    # include these values if appropriate
    local marks=""
    [ "$numChanges" -gt 0 ] && marks+=" $GIT_BRANCH_CHANGED_SYMBOL$numChanges"
    [ -n "$aheadN" ] && marks+=" $GIT_NEED_PUSH_SYMBOL$aheadN"
    [ -n "$behindN" ] && marks+=" $GIT_NEED_PULL_SYMBOL$behindN"

    # set proper color
    if [ -z "$marks" ]; then
      PS1+="$FG_GREEN"
    else
      PS1+="$FG_YELLOW"
    fi
    # print the git branch segment without a trailing newline
    PS1+=" $branch$marks "
  }

  PS1=""
  # ----first line----
  PS1+="\n$RESET"
  # set color, pipe and user
  PS1+="$FG_CYAN┌ \u@\h"
  # set color, @ [workingdir]
  PS1+="$FG_MAGENTA \w"
  # extra bar
  PS1+="\n$FG_CYAN│ "
  # set color, date and time
  PS1+="$FG_MAGENTA\t \d"
  # git stuff
  __git_info
  unset __git_info
  # end with newline
  PS1+="\n"
  # ----second line----
  # set color, end of pipe
  PS1+="$FG_CYAN└ "
  # command num
  PS1+="[\#] ";
  # cash prompt
  if [ $EXIT -eq 0 ]; then
    PS1+="$FG_GREEN";
  else
    PS1+="$FG_RED";
  fi
  PS1+="\$ "
  # reset styles
  PS1+="$RESET"
  PS2="⚡ "
}
export PROMPT_COMMAND=prompt_command
